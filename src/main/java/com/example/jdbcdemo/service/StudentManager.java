package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Student;

public class StudentManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createStudentTable = "CREATE TABLE Student("
			+ "studentNo INTEGER GENERATED BY DEFAULT AS IDENTITY, "
			+ "firstname varchar(20), "
			+ "lastname varchar(30), "
			+ "dob DATE"
			+ ")";



	private PreparedStatement addStudentStmt;
	private PreparedStatement deleteAllStudentsStmt;
	private PreparedStatement getAllStudentsStmt;

	private Statement statement;

	public StudentManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Student".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createStudentTable);

			addStudentStmt = connection
					.prepareStatement("INSERT INTO Student (firstname, lastname, dob) "
							+ "VALUES (?, ?, ? ,?)");
			deleteAllStudentsStmt = connection
					.prepareStatement("DELETE FROM Student");
			getAllStudentsStmt = connection
					.prepareStatement("SELECT studnetNo, firstname, lastname, dob FROM Student");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearStudents() {
		try {
			deleteAllStudentsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addStudent(Student student) {
		int count = 0;
		try {
			addStudentStmt.setString(1, student.getFirstname());
			addStudentStmt.setString(2, student.getLastname());
			addStudentStmt.setDate(3, student.getDob());

			count = addStudentStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Student> getAllStudents() {
		List<Student> Students = new ArrayList<Student>();

		try {
			ResultSet rs = getAllStudentsStmt.executeQuery();

			while (rs.next()) {
				Student s = new Student();
				s.setStudentNo(rs.getInt("studentNo"));
				s.setFirstname(rs.getString("firstname"));
				s.setFirstname(rs.getString("lastname"));
				s.setDob(rs.getDate("dob"));
				Students.add(s);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Students;
	}

}
