package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Student;

public class StudentManagerJDBC implements StudentManager {

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createStudentTable = "CREATE TABLE Student("
            + "studentNo INTEGER GENERATED BY DEFAULT AS IDENTITY, "
            + "firstname varchar(20), "
            + "lastname varchar(30) UNIQUE, "
            + "dob DATE"
            + ")";


    private PreparedStatement addStudentStmt;
    private PreparedStatement deleteAllStudentsStmt;
    private PreparedStatement getAllStudentsStmt;
    private PreparedStatement findStudentByIdStmt;
    private PreparedStatement findStudentByLastnameStmt;

    private Statement statement;
    private PreparedStatement updateStudentsStmt;


    public StudentManagerJDBC() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Student".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createStudentTable);

			/* other statements */
            addStudentStmt = connection
                    .prepareStatement("INSERT INTO Student (firstname, lastname, dob) "
                            + "VALUES (?, ?, ? )");
            deleteAllStudentsStmt = connection
                    .prepareStatement("DELETE FROM Student");
            getAllStudentsStmt = connection
                    .prepareStatement("SELECT * FROM Student");

            findStudentByIdStmt = connection.prepareStatement(
                    "SELECT * FROM Student WHERE studentNo = ?");


            findStudentByLastnameStmt = connection.prepareStatement(
                    "SELECT * FROM Student WHERE lastname LIKE ?"
            );

            updateStudentsStmt = connection.prepareStatement(
                    "UPDATE Student SET firstname=?, lastname=?, dob=? WHERE studentNo=?"
            );

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public void clearStudents() {
        try {
            deleteAllStudentsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addStudent(Student student) {
        int count = 0;
        try {
            addStudentStmt.setString(1, student.getFirstname());
            addStudentStmt.setString(2, student.getLastname());
            addStudentStmt.setDate(3, student.getDob());

            count = addStudentStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<Student>();

        try {
            ResultSet rs = getAllStudentsStmt.executeQuery();

            while (rs.next()) {
                Student s = new Student();
                s.setStudentNo(rs.getInt("studentNo"));
                s.setFirstname(rs.getString("firstname"));
                s.setLastname(rs.getString("lastname"));
                s.setDob(rs.getDate("dob"));
                students.add(s);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return students;
    }

    public Student findStudentById(int id) {

        try {
            findStudentByIdStmt.setInt(1, id);

            ResultSet rs = findStudentByIdStmt.executeQuery();
            Student student = new Student();
            while (rs.next()) {

                student.setStudentNo(rs.getInt("studentNo"));
                student.setFirstname(rs.getString("firstname"));
                student.setLastname(rs.getString("lastname"));
                student.setDob(rs.getDate("dob"));

            }

            return student;

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }


    public Student findStudentByLastname(String lastname) {
        try {
            findStudentByLastnameStmt.setString(1, lastname);
            ResultSet rs = findStudentByLastnameStmt.executeQuery();

            Student student = new Student();

            while (rs.next()) {
                student.setStudentNo(rs.getInt("studentNo"));
                student.setFirstname(rs.getString("firstname"));
                student.setLastname(rs.getString("lastname"));
                student.setDob(rs.getDate("dob"));
            }
            return student;

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }

    }

    @Override
    public void addAllStudents(List<Student> students) {
        try {
            connection.setAutoCommit(false);
            for (Student student : students) {
                addStudentStmt.setString(1, student.getFirstname());
                addStudentStmt.setString(2, student.getLastname());
                addStudentStmt.setDate(3, student.getDob());
                addStudentStmt.executeUpdate();
            }
            connection.commit();

        } catch (SQLException exception) {

            try {
                connection.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void updateAllStudents(List<Student> students, String lastname) {
        try {
            connection.setAutoCommit(false);
            for (Student student : students) {
                updateStudentsStmt.setString(1, student.getFirstname());
                updateStudentsStmt.setString(2, lastname);
                updateStudentsStmt.setDate(3, student.getDob());
                updateStudentsStmt.setInt(4, student.getStudentNo());
                updateStudentsStmt.executeUpdate();
            }
            connection.commit();
        } catch (SQLException exception) {
            try {
                connection.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
